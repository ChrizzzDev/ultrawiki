generator kysely {
  provider = "prisma-kysely"
  output   = "."
  fileName = "types.ts"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AltWeapon {
  WeaponId   Int            @id
  Name       String
  Type       AltWeapon_Type
  Damage     Decimal
  AltDmg     Decimal?
  Cooldown   Decimal
  Extras     String
  original   Int            @unique @db.UnsignedTinyInt
  obtainedIn String
  Obtained   Level          @relation(fields: [obtainedIn], references: [LevelId])
  Original   Weapon         @relation(fields: [original], references: [WeaponId], onDelete: Cascade, onUpdate: NoAction)

  @@index([obtainedIn], map: "AltWeapon_obtainedIn_fkey")
}

model Enemy {
  Name            String          @id @db.VarChar(50)
  Category        Enemy_Category?
  Race            Enemy_Race
  Weigth          Enemy_Weigth
  /// / @kyselyType ( import('./_t.ts).Health )
  Health          Json
  /// / @kyselyType ( import('./_t.ts).Attacks )
  Attacks         Json?
  /// / @kyselyType ( import('./_t.ts).Attacks )
  DamageModifiers Json?
  DebutId         String
  SPR             Int?            @db.TinyInt
  FallDamage      Boolean?        @db.Bit(1)
  Level           Level           @relation(fields: [DebutId], references: [LevelId], onDelete: NoAction, onUpdate: NoAction)
  LevelEnemy      LevelEnemy[]

  @@index([DebutId], map: "Enemy_DebutId_fkey")
}

model Style {
  StyleId Int     @id @default(autoincrement()) @db.UnsignedTinyInt
  Name    String  @db.VarChar(30)
  Color   String  @db.VarChar(30)
  Ordinal String  @db.VarChar(30)
  Points  Int     @db.UnsignedMediumInt
  Decay   Decimal @db.Decimal(10, 2)
}

model Weapon {
  WeaponId   Int         @id @db.UnsignedTinyInt
  Name       String      @db.VarChar(30)
  Type       Weapon_Type
  Damage     Decimal     @db.Decimal(4, 2)
  AltDmg     Decimal     @db.Decimal(4, 2)
  Cooldown   Decimal     @db.Decimal(5, 3)
  Extras     String
  Price      Int         @db.UnsignedMediumInt
  obtainedIn String      @db.VarChar(3)
  AltWeapon  AltWeapon?
  Obtained   Level       @relation(fields: [obtainedIn], references: [LevelId], onDelete: NoAction, onUpdate: NoAction)

  @@index([obtainedIn], map: "Weapon_obtainedIn_fkey")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Level {
  LevelId    String       @id @db.Char(3)
  Name       String       @db.VarChar(50)
  Act        String       @db.VarChar(50)
  Secret     String?      @db.VarChar(20)
  PRank      String?      @db.VarChar(20)
  Challenge  String?      @db.VarChar(255)
  AltWeapon  AltWeapon[]
  Enemy      Enemy[]
  LevelEnemy LevelEnemy[]
  Weapon     Weapon[]
}

model LevelEnemy {
  Quantity Int    @db.UnsignedTinyInt
  LevelId  String @db.Char(3)
  EnemyId  String @db.VarChar(50)
  Enemy    Enemy  @relation(fields: [EnemyId], references: [Name])
  Level    Level  @relation(fields: [LevelId], references: [LevelId])

  @@id([LevelId, EnemyId])
  @@index([EnemyId], map: "LevelEnemy_EnemyId_fkey")
}

enum Enemy_Category {
  Lesser
  Greater
  Supreme
}

enum AltWeapon_Type {
  Slab
  ImpactHammer
  SawbladeLauncher
}

enum Weapon_Type {
  Arm
  Revolver
  Shotgun
  Nailgun
  Railcannon
  RocketLauncher
}

enum Enemy_Race {
  Husk
  Machine
  Demon
  Angel
  Unknown
  PrimeSoul
}

enum Enemy_Weigth {
  Light
  Medium
  Heavy
  Superheavy
}
